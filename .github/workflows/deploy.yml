# delpoy.yml
name: Deploy FastAPI-Service

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run API Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.3'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        # run: pytest -v --disable-warnings
        run: pytest -v tests/test_cat.py tests/test_weather.py --disable-warnings

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: test  # ‚ö†Ô∏è –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ job test –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.3'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/FastAPI-Service

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
            systemctl stop fastapi.service || true
            [ -f fastapi_service.log ] && rm fastapi_service.log
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            git fetch origin main --depth=1
            git reset --hard FETCH_HEAD
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            source venv/bin/activate
            python -m pip install --upgrade pip
            pip install -r requirements.txt --no-cache-dir
            
            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
            echo "0" > visits.txt
            systemctl start fastapi.service
            echo "‚úÖ Deployment completed"

      - name: Set CI status env
        run: echo "STATUS=‚úÖ –£—Å–ø–µ—à–Ω–æ" >> $GITHUB_ENV

      - name: Prepare CI payload
        id: prepare_payload
        run: |
          echo "–°–æ–∑–¥–∞—ë–º JSON –¥–ª—è CI-—Ä–µ–ø–æ—Ä—Ç–∞"
          echo '{
            "secret": "'"${{ secrets.CI_SECRET }}"'",
            "project": "'"${{ github.repository }}"'",
            "status": "'"$STATUS"'",
            "commit": "'"$(git rev-parse --short HEAD)"'",
            "author": "'"${{ github.actor }}"'",
            "branch": "'"${{ github.ref_name }}"'",
            "workflow": "'"${{ github.workflow }}"'",
            "event_name": "'"${{ github.event_name }}"'",
            "message": "'"${{ github.event.head_commit.message }}"'",
            "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "repo_url": "https://github.com/${{ github.repository }}"
          }' > ci_payload.json
          echo "payload_file=ci_payload.json" >> $GITHUB_OUTPUT

      - name: Send CI Report to Telegram Bot
        env:
          CI_ENDPOINT: ${{ secrets.CI_ENDPOINT }}
        run: |
          echo "üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CI-–æ—Ç—á—ë—Ç..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$CI_ENDPOINT" \
            -H "Content-Type: application/json" \
            -d @"${{ steps.prepare_payload.outputs.payload_file }}")

          if [[ "$HTTP_CODE" -ne 200 ]]; then
            echo "::warning::CI report failed with HTTP $HTTP_CODE"
            exit 1
          else
            echo "‚úÖ CI-–æ—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: $HTTP_CODE"
          fi