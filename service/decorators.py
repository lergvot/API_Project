# service/decorators.py
from functools import wraps
from fastapi import Request
from typing import Callable, Awaitable, Dict, Any
import logging

from service.cache import get_cached, set_cached, ttl_logic
from service.config import CACHE_TTL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞
"""CACHE_TTL = {
    "weather_cache": 900,  # 15 –º–∏–Ω—É—Ç
    "cat_cache": 300,  # 5 –º–∏–Ω—É—Ç
}
"""


def cached_route(
    cache_key: str,
    ttl: int | None = None,
    fallback_data: dict | None = None,
    source: str = "auto",
):
    def decorator(func):
        @wraps(func)
        async def wrapper(request: Request, *args, **kwargs):
            use_cache = request.query_params.get("nocache") != "true"

            # TTL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ CACHE_TTL, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ
            effective_ttl = ttl if ttl is not None else CACHE_TTL.get(cache_key, 60)

            if use_cache:
                cached = await get_cached(cache_key)
                if cached and ttl_logic(cached, source=source):
                    logging.info(f"‚úÖ –ö—ç—à [{cache_key}]")
                    return cached
                logging.info(f"‚ôªÔ∏è –ö—ç—à [{cache_key}] —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

            result = await func(request, *args, **kwargs)

            if not result:
                logging.warning(f"‚òëÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback [{cache_key}]")
                return fallback_data or {}

            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º effective_ttl –∏–∑ CACHE_TTL –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ttl
            await set_cached(cache_key, result, ttl=effective_ttl)
            logging.info(f"üîÅ –ö—ç—à [{cache_key}] –æ–±–Ω–æ–≤–ª—ë–Ω, TTL = {effective_ttl}")

            return result

        return wrapper

    return decorator
