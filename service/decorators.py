# service/decorators.py
import logging
import time
from functools import wraps

from fastapi import Request

from service.cache import get_cached, set_cached, ttl_logic
from service.config import CACHE_TTL

logger = logging.getLogger(__name__)


def cached_route(
    cache_key: str,
    ttl: int | None = None,
    fallback_data: dict | None = None,
    source: str = "auto",
):
    """
    –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –≤—Ä–µ–º—è –∏–∑ CACHE_TTL[cache_key] –∏–ª–∏ ttl.
    –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç TTL –∑–∞–Ω–æ–≤–æ.
    """

    def decorator(func):
        @wraps(func)
        async def wrapper(request: Request, *args, **kwargs):
            use_cache = request.query_params.get("nocache") != "true"
            if use_cache:
                cached = await get_cached(cache_key)
                if cached and ttl_logic(cached, source=source):
                    logger.info(f"‚úÖ –ö—ç—à {cache_key}")
                    return cached
                logger.info(f"‚ôªÔ∏è –ö—ç—à {cache_key} —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

            result = await func(request, *args, **kwargs)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ fallback
            if isinstance(result, dict) and result.get("fallback"):
                logger.warning(f"‚òëÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback {cache_key}")
                return fallback_data or {}

            if result is None:
                logger.warning(f"‚òëÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback {cache_key}")
                return fallback_data or {}

            ttl_interval = ttl_logic(result, source=source, return_ttl=True)
            await set_cached(cache_key, result, ttl=ttl_interval)
            logger.info(f"üîÅ –ö—ç—à {cache_key} –æ–±–Ω–æ–≤–ª—ë–Ω, TTL = {ttl_interval}")

            return result

        return wrapper

    return decorator


def log_route(name: str = ""):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–æ–≥-–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è FastAPI-—Ä–æ—É—Ç–æ–≤.
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏–º—è –º–∞—Ä—à—Ä—É—Ç–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """

    def decorator(func):
        @wraps(func)
        async def wrapper(request: Request, *args, **kwargs):
            route_name = name or request.url.path
            start_time = time.perf_counter()

            try:
                response = await func(request, *args, **kwargs)
                duration = round((time.perf_counter() - start_time) * 1000, 2)
                logger.info(f"üì• {route_name} | {request.method} | {request.url}")
                logger.info(f"üì§ {route_name} | –û—Ç–≤–µ—Ç –∑–∞ {duration}–º—Å")
                return response
            except Exception as e:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ {route_name}: {e}")
                raise

        return wrapper

    return decorator
